include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/Makefile.def

QT=$(QTBASEDIR)/$(QTVER)/$(QT_ARCH)
PATH:=$(QT)/bin:$(QTBASEDIR)/Tools/$(QT_TOOLSARCH)/bin:$(PATH):

#Used in plugin bundle recipes
CURRENT_GIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)

#DEFS
PLUGINS_DEFAULT=bitop lsqlite3 luasocket lfs json iad gamekit storekit liquidfun reactphysics3d
PLUGINS_ALL=bitop lsqlite3 luasocket lpeg lfs json microphone gmedia bump ogg liquidfun gsfxr spine harfbuzz reactphysics3d

PLUGINS_WIN=$(PLUGINS_ALL) clipper struct controller camera threads
PLUGINS_WINONLY=spout steam luamidi
PLUGINS_MACONLY=steam luamidi
PLUGINS_WIN32=bitop lsqlite3 luasocket lfs json lpeg microphone clipper struct controller bump ogg liquidfun gsfxr spine threads luamidi harfbuzz reactphysics3d
PLUGINS_ANDROID=$(PLUGINS_ALL) ads clipper controller countly Facebook flurry gaming giftiz googlebilling \
				googlelicensing googleplay iab native notification storedetector \
				struct camera tts threads megacool map
PLUGINS_HTML5=bitop luasocket json ads Facebook lsqlite3 lfs bump ogg liquidfun gsfxr spine harfbuzz reactphysics3d
#Precompiled plugins only below
PLUGINS_IOS=luasocket camera ogg liquidfun gsfxr microphone spine threads harfbuzz reactphysics3d
PLUGINS_ATV=luasocket ogg liquidfun gsfxr microphone spine threads harfbuzz reactphysics3d
PLUGINS_MAC=luasocket ogg liquidfun gsfxr microphone spine threads harfbuzz reactphysics3d
#For reference
PLUGINS_WINRT=luasocket ogg liquidfun harfbuzz reactphysics3d

ADDONS=GSFXREditor Player TAME

ROOT=.
SDK=$(ROOT)/Sdk
GIDEROS_VERSION:=$(shell grep GIDEROS_VERSION $(ROOT)/libgideros/gideros.h | grep define | sed 's/^[^"]*"\([^"]*\)"/\1/')

#TOOLS
QMAKE=qmake

ifeq ($(OS),Windows_NT)
CC=$(QTBASEDIR)/Tools/$(QT_TOOLSARCH)/bin/gcc
CXX=$(QTBASEDIR)/Tools/$(QT_TOOLSARCH)/bin/g++
RELEASE=$(ROOT)/Build.Win
all: qtapp.install android.install winrt.install html5.install win32.install

clean: qtapp.clean android.clean win32.clean html5.clean winrt.clean
	rm -rf $(RELEASE)
else
UNAME_S := $(shell uname -s)
CC=gcc
CXX=g++
ifeq ($(UNAME_S),Linux)
RELEASE=$(ROOT)/Build.Linux
else
RELEASE=$(ROOT)/Build.Mac
endif
all: qtapp.install ios.install

clean: qtapp.clean ios.clean
	rm -rf $(RELEASE)
endif

versioning:
	A=`git rev-parse HEAD`; if grep -Fq $$A $(ROOT)/libgideros/gid*.h; then echo "VERSION OK"; else echo "#define GIDEROS_GIT_HASH \"$$A\"" >$(ROOT)/libgideros/gideros_build.h; fi 

#SDK includes
vpath %.h libgideros:libgvfs:libgid/include:lua/src:libgid/external/openal-soft-1.13/include/AL
$(SDK)/include/%: %
	cp $^ $(SDK)/include

$(SDK)/include/AL/%: %
	cp $^ $(SDK)/include/AL

SDK_INCS=$(addsuffix .h,gideros gplugin gproxy greferenced gexport) \
			$(addsuffix .h,gfile gpath gstdio) \
			$(addsuffix .h,gglobal glog gapplication gevent) \
			$(addsuffix .h,lua luaconf lualib lauxlib) \
			$(addprefix AL/,$(addsuffix .h,al alc alext efx efx-creative))

sdk.headers.dir:
	mkdir -p $(SDK)/include/AL

sdk.headers: sdk.headers.dir $(addprefix $(SDK)/include/,$(SDK_INCS))
	mkdir -p $(SDK)/include/gideros
	cp 2dsg/*.h 2dsg/gfxbackends/*.h luabinding/*.h libgid/include/*.h $(SDK)/include/gideros
	cp libgideros/*.h emscripten/cJSON.h $(SDK)/include/gideros

%.plugin.install:
	@mkdir -p $(RELEASE)/All\ Plugins/$(notdir $*)
	@for f in $(ROOT)/plugins/$*/*.gplugin; do if [ -f "$$f" ]; then cp $$f $(RELEASE)/All\ Plugins/$(notdir $*); fi; done

prep.repo:
	if [ ! -d $(ROOT)/plugins/spine/spine-runtimes/spine-c ]; then \
		git submodule add https://github.com/gideros/spine-runtimes.git  plugins/spine/spine-runtimes; \
		git reset HEAD .gitmodules; \
		git reset HEAD plugins/spine/spine-runtimes; \
	fi
	if [ ! -d $(ROOT)/plugins/harfbuzz/harfbuzz ]; then \
		git submodule add https://github.com/gideros/harfbuzz.git  plugins/harfbuzz/harfbuzz; \
		git reset HEAD .gitmodules; \
		git reset HEAD plugins/harfbuzz/harfbuzz; \
	fi
	if [ ! -d $(ROOT)/plugins/reactphysics3d/reactphysics3d ]; then \
		git submodule add https://github.com/gideros/reactphysics3d.git  plugins/reactphysics3d/reactphysics3d; \
		git reset HEAD .gitmodules; \
		git reset HEAD plugins/reactphysics3d/reactphysics3d; \
	fi
	git submodule update --recursive	

include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidGeneric.mk
ifeq ($(OS),Windows_NT)
MINGWMAKE=$(MAKE)
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidQtWin.mk
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidWin32.mk
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidAndroid.mk
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidWinRT.mk
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidPkg.mk
else
ifeq ($(UNAME_S),Linux)
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidQtLinux.mk
else
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidQtMac.mk
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidiOS.mk
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidMac.mk
endif
endif
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))/GidHtml5.mk


		
